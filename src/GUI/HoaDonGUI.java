/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import BLL.CTHoaDonBLL;
import BLL.HoaDonBLL;
import DTO.CTHoaDonDTO;
import DTO.HoaDonDTO;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.JLabel;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import com.toedter.calendar.JDateChooser;
import java.text.ParseException;


/**
 *
 * @author HAO KIET
 */
public class HoaDonGUI extends javax.swing.JPanel {
    HoaDonBLL hdBLL=new HoaDonBLL();
    CTHoaDonBLL cthdBLL=new CTHoaDonBLL();
    
    ArrayList<HoaDonDTO> arrHoaDon=new ArrayList<HoaDonDTO>();
    ArrayList<CTHoaDonDTO> arrCTHoaDon = new ArrayList<CTHoaDonDTO>();
    
    DefaultTableModel modelHD = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // không cho phép chỉnh sửa giá trị các ô trong bảng
        }
    };
    DefaultTableModel modelCTHD = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // không cho phép chỉnh sửa giá trị các ô trong bảng
        }
    };
    
    /**
     * Creates new form HoaDonGUI
     */
    public HoaDonGUI() {
        initComponents();
        jTable_HD.setModel(modelHD);
        jTable_CTHD.setModel(modelCTHD);
        
        jDateStart.setVisible(false);
        jDateEnd.setVisible(false);
        
        
        modelHD.addColumn("STT");
        modelHD.addColumn("Mã Hóa Đơn");
        modelHD.addColumn("Mã Nhân Viên");
        modelHD.addColumn("Mã Khách Hàng");
        modelHD.addColumn("Ngày Lập");
        modelHD.addColumn("Ngày Xuất");
        modelHD.addColumn("Tổng Giá Trị");
        modelHD.addColumn("Tổng Giá Trị Sau Giảm");
        
       
        modelCTHD.addColumn("Mã Sản Phẩm");
        modelCTHD.addColumn("Tên Sản Phẩm");
        modelCTHD.addColumn("Số Lượng");
        modelCTHD.addColumn("Đơn Giá");      
       SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

        // Lấy thời gian hiện tại
        Date date = new Date();
        Timer timer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Cập nhật giá trị của jLabel
                jLabel_Date.setText(dateFormat.format(new Date()));
            }
        });
        timer.start();
        loadHDlist();
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_HD = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_CTHD = new javax.swing.JTable();
        jButton_Xoa = new javax.swing.JButton();
        jButton_ThanhToan = new javax.swing.JButton();
        jButton_CapNhat = new javax.swing.JButton();
        jTextField_Search = new javax.swing.JTextField();
        jButton_Search = new javax.swing.JButton();
        jComboBox_SearchDate = new javax.swing.JComboBox<>();
        jLabel_Date = new javax.swing.JLabel();
        jComboBox_SearchType = new javax.swing.JComboBox<>();
        jDateStart = new com.toedter.calendar.JDateChooser();
        jDateEnd = new com.toedter.calendar.JDateChooser();

        setMaximumSize(new java.awt.Dimension(1000, 650));
        setMinimumSize(new java.awt.Dimension(1000, 650));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0)));

        jTable_HD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_HD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_HDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_HD);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0)));

        jTable_CTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_CTHD);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        jButton_Xoa.setText("Xóa");
        jButton_Xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_XoaActionPerformed(evt);
            }
        });

        jButton_ThanhToan.setText("Thanh Toán");
        jButton_ThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ThanhToanActionPerformed(evt);
            }
        });

        jButton_CapNhat.setText("Cập Nhật");
        jButton_CapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CapNhatActionPerformed(evt);
            }
        });

        jTextField_Search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_SearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField_SearchFocusLost(evt);
            }
        });
        jTextField_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_SearchActionPerformed(evt);
            }
        });

        jButton_Search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Comp/search icon.png"))); // NOI18N
        jButton_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SearchActionPerformed(evt);
            }
        });

        jComboBox_SearchDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {" ", "Ngày","Tháng","Năm","Tháng/Năm","Ngày/Tháng/Năm","Ngày/Tháng/Năm-Ngày/Tháng/Năm"}));
        jComboBox_SearchDate.setPreferredSize(new java.awt.Dimension(100, 30));
        jComboBox_SearchDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_SearchDateItemStateChanged(evt);
            }
        });
        jComboBox_SearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_SearchDateActionPerformed(evt);
            }
        });

        jLabel_Date.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel_Date.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Date.setText("Ngày Tháng Năm");
        jLabel_Date.setToolTipText("");
        jLabel_Date.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel_Date.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel_Date.setName(""); // NOI18N
        jLabel_Date.setVerifyInputWhenFocusTarget(false);

        jComboBox_SearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {" ","Mã Hóa Đơn","Mã Nhân Viên","Mã Khách Hàng" }));
        jComboBox_SearchType.setPreferredSize(new java.awt.Dimension(100, 30));
        jComboBox_SearchType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_SearchTypeItemStateChanged(evt);
            }
        });
        jComboBox_SearchType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_SearchTypeMouseClicked(evt);
            }
        });
        jComboBox_SearchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_SearchTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_ThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(jButton_CapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox_SearchDate, 0, 139, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox_SearchType, 0, 97, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_SearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_SearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_CapNhat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_ThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_XoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_XoaActionPerformed
        // TODO add your handling code here:
        int i= jTable_HD.getSelectedRow();
         if(i>=0){
            arrHoaDon.remove(i);
            hdBLL.DelHD(modelHD.getValueAt(i, 1).toString());
            
             
         }
         loadHDlist();
         modelCTHD.setColumnCount(0);
    }//GEN-LAST:event_jButton_XoaActionPerformed

    private void jButton_ThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ThanhToanActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
        Date date = new Date();
//        HoaDonDTO pn = new HoaDonDTO();

        int row = jTable_HD.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn hóa đơn!");
        } else {
            Object valuenull = modelHD.getValueAt(row, 5);
            if (valuenull != null) {
                JOptionPane.showMessageDialog(null, "Hóa đơn này đã được thanh toán, mời bạn chọn lại hóa đơn khác !!!");
            } else {
                modelHD.setValueAt(dateFormat.format(new Date()), row, 5);
                hdBLL.AddNgayGiao(modelHD.getValueAt(row, 1).toString(), dateFormat.format(new Date()));
                for (int i = jTable_CTHD.getRowCount() - 1; i >= 0; i--) {
                    
                        
                            int soluong = Integer.parseInt(modelCTHD.getValueAt(i, 2).toString());
                            
                            hdBLL.DelSL(modelCTHD.getValueAt(i, 0).toString(), soluong);
                        
                    

                }
            }
        }
        loadHDlist();
    }//GEN-LAST:event_jButton_ThanhToanActionPerformed

    private void jTable_HDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_HDMouseClicked
        // TODO add your handling code here:
        for(int i=modelCTHD.getRowCount()-1;i>=0;i--){
            modelCTHD.removeRow(i);
        }
        int row = jTable_HD.getSelectedRow();
        HoaDonDTO hd = arrHoaDon.get(row);
        System.out.print(hd.getMaHD()+"-----------------------------------------------");
        ArrayList<CTHoaDonDTO> listCTHD = cthdBLL.getListCTHoaDon();
        System.out.print(listCTHD.size()+" Phần tử ");
//        for(CTHoaDonDTO cthd : listCTHD) {
//            System.out.print(cthd.getMaHD()+"-----------------------------------------------");
//            int stt=1;
//            if(cthd.getMaHD().equals(hd.getMaHD())) {
//            	
//                String id = cthd.getMaSP();
//                String name = cthd.getTenSP();
//                int soLuong = (int) cthd.getSoLuong();
//                int dongia = cthd.getDonGia();
//                
//                Object[] rowData = {stt,id, name, dongia, soLuong};
//                stt++;
//                modelCTHD.addRow(rowData);
//            }
        
//        }
        loadCTHDlist(hd.getMaHD());
    
    }//GEN-LAST:event_jTable_HDMouseClicked

    private void jComboBox_SearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_SearchDateActionPerformed
        // TODO add your handling code here:
        String selectedValue = (String) jComboBox_SearchDate.getSelectedItem();

        // Đặt JComboBox2 thành giá trị tương ứng
        if(selectedValue!=""){
            jComboBox_SearchType.setSelectedItem(0);
        }
    }//GEN-LAST:event_jComboBox_SearchDateActionPerformed

    private void jButton_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SearchActionPerformed

<<<<<<< HEAD
            // TODO add your handling code here:
//        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
//        String selectedValueID = jComboBox_SearchType.getSelectedItem().toString();
//        // Lấy giá trị từ jTextField
////        String searchText = jTextField_Search.getText().trim();
////
////        // Tách giá trị ngày, tháng và năm từ chuỗi
////        String[] dateParts = searchText.split("/");
////        String day = "";
////        String month = "";
////        String year = "";
////
////        if (dateParts.length == 3) {
////            day = dateParts[0].trim();
////            month = dateParts[1].trim();
////            year = dateParts[2].trim();
////        } else {
////            // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
////            JOptionPane.showMessageDialog(this, "Giá trị ngày tháng năm không hợp lệ.");
////            return; // Thoát khỏi hàm nếu giá trị không hợp lệ
////        }
////        
////
////        // Chuyển đổi giá trị ngày, tháng và năm thành số nguyên
////        int dayValue = Integer.parseInt(day);
////        int monthValue = Integer.parseInt(month);
////        int yearValue = Integer.parseInt(year);
////
////        // Kiểm tra tính hợp lệ của ngày, tháng và năm
////        if (isValidDate(dayValue, monthValue, yearValue)) {
////            // Ngày, tháng và năm hợp lệ, thực hiện tìm kiếm
////            if ("Ngày".equals(selectedValue)) {
////                // Tìm kiếm theo ngày trong jTable
////                searchByDay(day);
////            } else if ("Tháng".equals(selectedValue)) {
////                // Tìm kiếm theo tháng trong jTable
////                searchByMonth(month);
////            } else if ("Năm".equals(selectedValue)) {
////                // Tìm kiếm theo năm trong jTable
////                searchByYear(year);
////            } else if ("Tháng/Năm".equals(selectedValue)) {
////                // Tìm kiếm theo tháng và năm trong jTable
////                searchByMonthAndYear(month, year);
////            } else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
////                // Tìm kiếm theo ngày, tháng và năm trong jTable
////                searchByDayMonthYear(day, month, year);
////            } else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
////                // Tìm kiếm theo ngày, tháng và năm trong jTable
////                SearchByKhoangCach(searchText);
////            } 
////            // ...
////        } else {
////            // Ngày, tháng và năm không hợp lệ, hiển thị thông báo hoặc xử lý lỗi
////            JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
////        }
//        String searchText = jTextField_Search.getText().trim();
//
//// Biểu thức chính quy cho ngày tháng có định dạng "ngày/tháng/năm"
//        String datePattern = "\\d{1,2}/\\d{1,2}/\\d{4}";
//
//        if (searchText.matches(datePattern)) {
//            // searchText đúng định dạng ngày tháng, thực hiện tìm kiếm
//            String[] dateParts = searchText.split("/");
//            String day = dateParts[0].trim();
//            String month = dateParts[1].trim();
//            String year = dateParts[2].trim();
//
//            int dayValue = Integer.parseInt(day);
//            int monthValue = Integer.parseInt(month);
//            int yearValue = Integer.parseInt(year);
//
//            if (isValidDate(dayValue, monthValue, yearValue)) {
//                // Ngày, tháng và năm hợp lệ, thực hiện tìm kiếm theo các điều kiện
//                if ("Ngày".equals(selectedValue)) {
//                    searchByDay(day);
//                } else if ("Tháng".equals(selectedValue)) {
//                    searchByMonth(month);
//                } else if ("Năm".equals(selectedValue)) {
//                    searchByYear(year);
//                } else if ("Tháng/Năm".equals(selectedValue)) {
//                    searchByMonthAndYear(month, year);
//                } else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
//                    searchByDayMonthYear(day, month, year);
//                } else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
//                    SearchByKhoangCach(searchText);
//                } 
//                // ...
//            } else {
//                // Ngày, tháng và năm không hợp lệ, hiển thị thông báo hoặc xử lý lỗi
//                JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
//            }
//        }
//
//
//        
//        if ("Mã Hóa Đơn".equals(selectedValueID)){
//            searchByIDHD(searchText);
//        } else if ("Mã Nhân Viên".equals(selectedValueID)){
//            searchByIDNV(searchText);
//        } else if ("Mã Hóa Đơn".equals(selectedValueID)){
//            searchByIDNV(searchText);
//        } else if ("Tất cả".equals(selectedValueID)){
//            loadHDlist();
//        }
//        else {
//            // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
//            JOptionPane.showMessageDialog(this, "Tùy chọn không hợp lệ.");
//        }
        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
        String selectedValueID = jComboBox_SearchType.getSelectedItem().toString();
        String searchText = jTextField_Search.getText().trim();

        // Kiểm tra xem selectedValue có rỗng không
        if (!selectedValue.isEmpty()) {
            // Tìm kiếm theo ngày tháng
            // Biểu thức chính quy cho ngày tháng có định dạng "ngày/tháng/năm"
            String datePattern = "\\d{1,2}/\\d{1,2}/\\d{4}";

            if (searchText.matches(datePattern)) {
                // searchText đúng định dạng ngày tháng, thực hiện tìm kiếm theo ngày tháng
                String[] dateParts = searchText.split("/");
                String day = dateParts[0].trim();
                String month = dateParts[1].trim();
                String year = dateParts[2].trim();

                int dayValue = Integer.parseInt(day);
                int monthValue = Integer.parseInt(month);
                int yearValue = Integer.parseInt(year);

                if (isValidDate(dayValue, monthValue, yearValue)) {
                    // Ngày, tháng và năm hợp lệ, thực hiện tìm kiếm theo ngày tháng
                    if ("Ngày".equals(selectedValue)) {
                        searchByDay(day);
                    } else if ("Tháng".equals(selectedValue)) {
                        searchByMonth(month);
                    } else if ("Năm".equals(selectedValue)) {
                        searchByYear(year);
                    } else if ("Tháng/Năm".equals(selectedValue)) {
                        searchByMonthAndYear(month, year);
                    } else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
                        searchByDayMonthYear(day, month, year);
                    } else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
                        SearchByKhoangCach(searchText);
                    } 
                    // ...
                } else {
                    // Ngày, tháng và năm không hợp lệ, hiển thị thông báo hoặc xử lý lỗi
                    JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
                }
            }
        } else {
=======
        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
        String selectedValueID = jComboBox_SearchType.getSelectedItem().toString();
        String searchText = jTextField_Search.getText().trim();
        
        if ("Ngày".equals(selectedValue)) {
                    searchByDay(searchText);
        } else if ("Tháng".equals(selectedValue)) {
                    searchByMonth(searchText);
        } else if ("Năm".equals(selectedValue)) {
                    searchByYear(searchText);
        } else if ("Tháng/Năm".equals(selectedValue)) {
                    searchByMonthAndYear(searchText);
        } else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
                    searchByDayMonthYear(searchText);
        } 
//        else if (jDateStart.getDate() != null && jDateEnd.getDate() != null ) {
//                    searchByRange(jDateStart,jDateEnd);
//        } 
        else {
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
            // Tìm kiếm theo ID nhân viên
            if ("Mã Hóa Đơn".equals(selectedValueID)) {
                searchByIDHD(searchText);
            } else if ("Mã Nhân Viên".equals(selectedValueID)) {
                searchByIDNV(searchText);
            } else if ("Mã Khách Hàng".equals(selectedValueID)) {
                searchByIDKH(searchText);
<<<<<<< HEAD
            }
            else {
                // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
                JOptionPane.showMessageDialog(this, "Tùy chọn không hợp lệ.");
            }
        }
=======
            } 
        }    
        // Kiểm tra xem selectedValue có rỗng không
//        if (!selectedValue.isEmpty()) {
//            // Tìm kiếm theo ngày tháng
//            // Biểu thức chính quy cho ngày tháng có định dạng "ngày/tháng/năm"
//            String datePattern = "\\d{1,2}/\\d{1,2}/\\d{4}";
//
//            if (searchText.matches(datePattern)) {
//                // searchText đúng định dạng ngày tháng, thực hiện tìm kiếm theo ngày tháng
//                String[] dateParts = searchText.split("/");
//                String day = dateParts[0].trim();
//                String month = dateParts[1].trim();
//                String year = dateParts[2].trim();
//
//                int dayValue = Integer.parseInt(day);
//                int monthValue = Integer.parseInt(month);
//                int yearValue = Integer.parseInt(year);
//
//                if (isValidDate(dayValue, monthValue, yearValue)) {
//                    // Ngày, tháng và năm hợp lệ, thực hiện tìm kiếm theo ngày tháng
//                     if ("Ngày/Tháng/Năm".equals(selectedValue)) {
//                        searchByDayMonthYear(day, month, year);
//                    } else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
//                        SearchByKhoangCach(searchText);
//                    } 
//                    // ...
//                } else {
//                    // Ngày, tháng và năm không hợp lệ, hiển thị thông báo hoặc xử lý lỗi
//                    JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
//                }
//            }
//        } else {
//            // Tìm kiếm theo ID nhân viên
//            if ("Mã Hóa Đơn".equals(selectedValueID)) {
//                searchByIDHD(searchText);
//            } else if ("Mã Nhân Viên".equals(selectedValueID)) {
//                searchByIDNV(searchText);
//            } else if ("Mã Hóa Đơn".equals(selectedValueID)) {
//                searchByIDNV(searchText);
//            } else if ("Tất cả".equals(selectedValueID)) {
//                loadHDlist();
//            } else {
//                // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
//                JOptionPane.showMessageDialog(this, "Tùy chọn không hợp lệ.");
//            }
//        }
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92

    }//GEN-LAST:event_jButton_SearchActionPerformed

    private void jComboBox_SearchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_SearchTypeActionPerformed
        // TODO add your handling code here:
//        String selectedValue = (String) jComboBox_SearchType.getSelectedItem();
//
//        // Đặt JComboBox2 thành giá trị tương ứng
//        if(selectedValue != ""){
//            jComboBox_SearchDate.setSelectedItem(0);
//        }
    }//GEN-LAST:event_jComboBox_SearchTypeActionPerformed

    private void jComboBox_SearchTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_SearchTypeMouseClicked
        // TODO add your handling code here:
//        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
//    
//    // Thiết lập giá trị mẫu cho jTextField dựa trên mục đã chọn
//        setTextFieldPlaceholder(selectedValue);
    }//GEN-LAST:event_jComboBox_SearchTypeMouseClicked

    private void jComboBox_SearchDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_SearchDateItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
        
        // Thiết lập giá trị mẫu cho jTextField dựa trên mục đã chọn
        setTextFieldPlaceholder(selectedValue);
        }
        String selectedValue = (String) jComboBox_SearchDate.getSelectedItem();
            if (!selectedValue.equals(" ")) {
                // Nếu mục chọn không phải là " ", đặt comboBox2 về giá trị mặc định
                jComboBox_SearchType.setSelectedItem(" ");
            }
        
    }//GEN-LAST:event_jComboBox_SearchDateItemStateChanged

    private void jComboBox_SearchTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_SearchTypeItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
        String selectedValue = jComboBox_SearchType.getSelectedItem().toString();
        
        // Thiết lập giá trị mẫu cho jTextField dựa trên mục đã chọn
        setTextFieldPlaceholder(selectedValue);
        }
        String selectedValue = (String) jComboBox_SearchType.getSelectedItem();
            if (!selectedValue.equals(" ")) {
                // Nếu mục chọn không phải là " ", đặt comboBox2 về giá trị mặc định
                jComboBox_SearchDate.setSelectedItem(" ");
            }
    }//GEN-LAST:event_jComboBox_SearchTypeItemStateChanged

    private void jTextField_SearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_SearchFocusGained
        // TODO add your handling code here:
        if(jTextField_Search!=null){
            jTextField_Search.setText("");
            jTextField_Search.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_jTextField_SearchFocusGained

    private void jTextField_SearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_SearchFocusLost
        // TODO add your handling code here:
//        if(jTextField_Search.getText().isEmpty()){
//            jTextField_Search.setForeground(Color.GRAY);
//            
//        }
    }//GEN-LAST:event_jTextField_SearchFocusLost

    private void jTextField_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_SearchActionPerformed

    private void jButton_CapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CapNhatActionPerformed
        loadHDlist();
    }//GEN-LAST:event_jButton_CapNhatActionPerformed

    private void setTextFieldPlaceholder(String selectedValue) {
        String placeholderText = ""; // Chuỗi mẫu sẽ được hiển thị trong jTextField

        // Xác định chuỗi mẫu dựa trên mục đã chọn
        if ("Tháng/Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10/2023";
        }else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10/10/2003";
        }else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10/10/2003-1/1/2023";
        }else if ("Ngày".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10(Ngày) ";
        }else if ("Tháng".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10(Tháng) ";
        }else if ("Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 2003(Năm) ";
        }else if ("Mã Hóa Đơn".equals(selectedValue)) {
            placeholderText = "Ví dụ: HD001";
        }else if ("Mã Nhân Viên".equals(selectedValue)) {
            placeholderText = "Ví dụ: NV001";
        }else if ("Mã Khách Hàng".equals(selectedValue)) {
            placeholderText = "Ví dụ: KH001";
        }
        

        // Thiết lập giá trị mẫu cho jTextField
        jTextField_Search.setText(placeholderText);
    }
    
    private void searchByIDKH(String idkh) {
    // Thực hiện tìm kiếm theo ID trong jTable và cập nhật kết quả lên jTable
        
        DefaultTableModel newModel = new DefaultTableModel(); // Tạo một DefaultTableModel mới để chứa kết quả tìm kiếm\
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");
        int stt=1;
        for (int i = 0; i < modelHD.getRowCount(); i++) {
            String rowData = modelHD.getValueAt(i, 3).toString(); // Cột ID là cột 0
            if (rowData.contains(idkh)) {
                // Nếu tìm thấy ID, thêm hàng tương ứng vào jTable
                
                Object[] row = new Object[]{stt,modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2),modelHD.getValueAt(i, 3),modelHD.getValueAt(i, 4),modelHD.getValueAt(i, 5),modelHD.getValueAt(i, 6)};
                newModel.addRow(row);
                stt++;
                
            }
        }
        jTable_HD.setModel(newModel);
    }
    private void searchByIDNV(String idnv) {
    // Thực hiện tìm kiếm theo ID trong jTable và cập nhật kết quả lên jTable
        DefaultTableModel newModel = new DefaultTableModel(); // Tạo một DefaultTableModel mới để chứa kết quả tìm kiếm\
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");
        
        int stt=1;
        for (int i = 0; i < modelHD.getRowCount(); i++) {
            String rowData = modelHD.getValueAt(i, 2).toString(); // Cột ID là cột 0
            if (rowData.contains(idnv)) {
                // Nếu tìm thấy ID, thêm hàng tương ứng vào jTable
                
                Object[] row = new Object[]{stt,modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2),modelHD.getValueAt(i, 3),modelHD.getValueAt(i, 4),modelHD.getValueAt(i, 5),modelHD.getValueAt(i, 6)};
                newModel.addRow(row);
                stt++;
                
            }
        }
        jTable_HD.setModel(newModel);
    }
    private void searchByIDHD(String idhd) {
    // Thực hiện tìm kiếm theo ID trong jTable và cập nhật kết quả lên jTable
        
        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");
        int stt=1;
        for (int i = 0; i < modelHD.getRowCount(); i++) {
            String rowData = modelHD.getValueAt(i, 1).toString(); // Cột ID là cột 0
            if (rowData.contains(idhd)) {
                // Nếu tìm thấy ID, thêm hàng tương ứng vào jTable
                
                Object[] row = new Object[]{stt,modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2),modelHD.getValueAt(i, 3),modelHD.getValueAt(i, 4),modelHD.getValueAt(i, 5),modelHD.getValueAt(i, 6)};
                newModel.addRow(row);
                stt++;
                
            }
        }
        jTable_HD.setModel(newModel);
    }
    private void searchByDay(String day) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");

        int stt = 1;

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày tháng năm

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 5 (chỉ số cột 4) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date date = dateFormat.parse(rowDataDate.toString());

                    // Chuyển đổi Date thành định dạng ngày
                    String formattedDate = dateFormat.format(date);
                    String[] dateParts = formattedDate.split("-");
                    String year = dateParts[0].trim();
                    String thang = dateParts[1].trim();
                    String ngay = dateParts[2].trim();

                    // So sánh giá trị ngày đã chuyển đổi với ngày bạn đang tìm kiếm
                    if (ngay.equals(day)) {
                        // Nếu tìm thấy ngày, thêm hàng tương ứng vào jTable
<<<<<<< HEAD
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
=======
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7),modelHD.getValueAt(i,7)};
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
                        newModel.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    ex.printStackTrace();
                }
            }
        }
        jTable_HD.setModel(newModel);
    }

//    private void searchByMonth(String month) {
//    // Xóa tất cả dữ liệu hiện có trong jTable
//        modelHD.setRowCount(0);
//
//        int stt = 1;
//
//        SimpleDateFormat monthFormat = new SimpleDateFormat("MM/yyyy");
//
//        for (int i = 0; i < modelHD.getRowCount(); i++) {
//            // Lấy giá trị từ cột thứ 5 (chỉ số cột 4) trong modelHD
//            Object rowDataDate = modelHD.getValueAt(i, 5);
//
//            if (rowDataDate != null) {
//                try {
//                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
//                    Date date = monthFormat.parse(rowDataDate.toString());
//
//                    // Chuyển đổi Date thành định dạng ngày
//                    String formattedMonth = monthFormat.format(date);
//
//                    // So sánh giá trị ngày đã chuyển đổi với ngày bạn đang tìm kiếm
//                    if (formattedMonth.equals(month)) {
//                        // Nếu tìm thấy ngày, thêm hàng tương ứng vào jTable
<<<<<<< HEAD
//                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
=======
//                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7),modelHD.getValueAt(i,7)};
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
//                        modelHD.addRow(row);
//                        stt++;
//                    }
//                } catch (ParseException ex) {
//                    // Xử lý nếu không thể chuyển đổi ngày
//                    JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi ngày.");
//                    ex.printStackTrace();
//
//                }
//            }
//        }
//    }
//    private void searchByYear(String year) {
//    // Xóa tất cả dữ liệu hiện có trong jTable
//        modelHD.setRowCount(0);
//
//        int stt = 1;
//
//        SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy"); // Định dạng năm
//
//        for (int i = 0; i < modelHD.getRowCount(); i++) {
//            
//            Object rowDataDate = modelHD.getValueAt(i, 5);
//
//            if (rowDataDate != null) {
//                try {
//                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
//                    Date date = yearFormat.parse(rowDataDate.toString());
//
//                    // Chuyển đổi Date thành định dạng năm
//                    String formattedYear = yearFormat.format(date);
//
//                    // So sánh giá trị năm đã chuyển đổi với năm bạn đang tìm kiếm
//                    if (formattedYear.equals(year)) {
//                        // Nếu tìm thấy năm, thêm hàng tương ứng vào jTable
<<<<<<< HEAD
//                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
=======
//                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7),modelHD.getValueAt(i,7)};
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
//                        modelHD.addRow(row);
//                        stt++;
//                    }
//                } catch (ParseException ex) {
//                    // Xử lý nếu không thể chuyển đổi ngày
//                    JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi năm.");
//                    ex.printStackTrace();
//                }
//            }
//        }
//    }
        private void searchByMonth(String month) {
<<<<<<< HEAD
        // Xóa tất cả dữ liệu hiện có trong jTable
        

        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");

        int stt = 1;

        SimpleDateFormat monthFormat = new SimpleDateFormat("MM/yyyy");

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    Date date = monthFormat.parse(rowDataDate.toString());
                    String formattedMonth = monthFormat.format(date);

                    if (formattedMonth.equals(month)) {
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        newModel.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi ngày.");
                    ex.printStackTrace();
                }
            }
        }
        jTable_HD.setModel(newModel);
    }

        private void searchByYear(String year) {
            // Xóa tất cả dữ liệu hiện có trong jTable
            

            DefaultTableModel newModel = new DefaultTableModel();
            newModel.addColumn("STT");
            newModel.addColumn("Mã Hóa Đơn");
            newModel.addColumn("Mã Nhân Viên");
            newModel.addColumn("Mã Khách Hàng");
            newModel.addColumn("Ngày Lập");
            newModel.addColumn("Ngày Xuất");
            newModel.addColumn("Tổng Giá Trị");
            newModel.addColumn("Tổng Giá Trị Sau Giảm");

            int stt = 1;

            SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");

            for (int i = 0; i < modelHD.getRowCount(); i++) {
                Object rowDataDate = modelHD.getValueAt(i, 5);

                if (rowDataDate != null) {
                    try {
                        Date date = yearFormat.parse(rowDataDate.toString());
                        String formattedYear = yearFormat.format(date);

                        if (formattedYear.equals(year)) {
                            Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                            newModel.addRow(row);
                            stt++;
                        }
                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi năm.");
                        ex.printStackTrace();
                    }
                }
            }
            jTable_HD.setModel(newModel);
        }
    private void searchByMonthAndYear(String month, String year) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        DefaultTableModel newModel = new DefaultTableModel();
            newModel.addColumn("STT");
            newModel.addColumn("Mã Hóa Đơn");
            newModel.addColumn("Mã Nhân Viên");
            newModel.addColumn("Mã Khách Hàng");
            newModel.addColumn("Ngày Lập");
            newModel.addColumn("Ngày Xuất");
            newModel.addColumn("Tổng Giá Trị");
            newModel.addColumn("Tổng Giá Trị Sau Giảm");

=======
        // Xóa tất cả dữ liệu hiện có trong jTable
        

        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92

        int stt = 1;

        SimpleDateFormat monthFormat = new SimpleDateFormat("yyyy-MM");

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            Object rowDataDate = modelHD.getValueAt(i, 5);
           
            if (rowDataDate != null) {
                try {
                    Date date = monthFormat.parse(rowDataDate.toString());
                    String formattedMonth = monthFormat.format(date);
                    
                    System.out.println(formattedMonth);
                    
                    String[] dateParts = formattedMonth.split("-");
                    String year = dateParts[0].trim();
                    String thang = dateParts[1].trim();
                    
                    if (thang.equals(month)) {
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7)};
                        newModel.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi Tháng.");
                    ex.printStackTrace();
                }
            }
        }
        jTable_HD.setModel(newModel);
    }

        private void searchByYear(String year) {
            // Xóa tất cả dữ liệu hiện có trong jTable
            

            DefaultTableModel newModel = new DefaultTableModel();
            newModel.addColumn("STT");
            newModel.addColumn("Mã Hóa Đơn");
            newModel.addColumn("Mã Nhân Viên");
            newModel.addColumn("Mã Khách Hàng");
            newModel.addColumn("Ngày Lập");
            newModel.addColumn("Ngày Xuất");
            newModel.addColumn("Tổng Giá Trị");
            newModel.addColumn("Tổng Giá Trị Sau Giảm");

            int stt = 1;

            SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");

            for (int i = 0; i < modelHD.getRowCount(); i++) {
                Object rowDataDate = modelHD.getValueAt(i, 5);

                if (rowDataDate != null) {
                    try {
                        Date date = yearFormat.parse(rowDataDate.toString());
                        String formattedYear = yearFormat.format(date);

                        if (formattedYear.equals(year)) {
                            Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7)};
                            newModel.addRow(row);
                            stt++;
                        }
                    } catch (ParseException ex) {
                        JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi năm.");
                        ex.printStackTrace();
                    }
                }
            }
            jTable_HD.setModel(newModel);
        }
        private void searchByMonthAndYear(String search) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        String[] dateParts = search.split("/");
    
        if (dateParts.length != 2) {
        // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
            JOptionPane.showMessageDialog(this, "Giá trị ngày tháng không hợp lệ.");
            return; // Thoát khỏi hàm nếu giá trị không hợp lệ
        }

        String month = dateParts[0].trim();
        String year = dateParts[1].trim();
        
        if (!isValid(Integer.parseInt(month), Integer.parseInt(year))) {
            // Hiển thị thông báo lỗi nếu ngày, tháng và năm không hợp lệ
            JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
            return; // Thoát khỏi hàm nếu ngày tháng năm không hợp lệ
        }

        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");

        int stt = 1;

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    Date date = dateFormat.parse(rowDataDate.toString());

                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(date);
                    int dateMonth = calendar.get(Calendar.MONTH) + 1;
                    int dateYear = calendar.get(Calendar.YEAR);

                    if (dateMonth == Integer.parseInt(month) && dateYear == Integer.parseInt(year)) {
<<<<<<< HEAD
                        // Nếu tìm thấy tháng và năm, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
=======
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7)};
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
                        newModel.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
            }
        }
        jTable_HD.setModel(newModel);
    }
<<<<<<< HEAD
    private void searchByDayMonthYear(String day, String month, String year) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        DefaultTableModel newModel = new DefaultTableModel();
            newModel.addColumn("STT");
            newModel.addColumn("Mã Hóa Đơn");
            newModel.addColumn("Mã Nhân Viên");
            newModel.addColumn("Mã Khách Hàng");
            newModel.addColumn("Ngày Lập");
            newModel.addColumn("Ngày Xuất");
            newModel.addColumn("Tổng Giá Trị");
            newModel.addColumn("Tổng Giá Trị Sau Giảm");
=======
        private void searchByDayMonthYear(String search) {
        String[] dateParts = search.split("/");

        if (dateParts.length != 3) {
            // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
            JOptionPane.showMessageDialog(this, "Giá trị ngày tháng năm không hợp lệ.");
            return; // Thoát khỏi hàm nếu giá trị không hợp lệ
        }

        String day = dateParts[0].trim();
        String month = dateParts[1].trim();
        String year = dateParts[2].trim();

        if (!isValidDate(Integer.parseInt(day), Integer.parseInt(month), Integer.parseInt(year))) {
            // Hiển thị thông báo lỗi nếu ngày, tháng và năm không hợp lệ
            JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
            return; // Thoát khỏi hàm nếu ngày tháng năm không hợp lệ
        }
        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92

        int stt = 1;

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    Date date = dateFormat.parse(rowDataDate.toString());

                    Calendar cal = Calendar.getInstance();
                    cal.setTime(date);
                    int dayValue = cal.get(Calendar.DAY_OF_MONTH);
                    int monthValue = cal.get(Calendar.MONTH) + 1; // Tháng trong Calendar bắt đầu từ 0
                    int yearValue = cal.get(Calendar.YEAR);

                    if (day.equals(String.valueOf(dayValue)) && month.equals(String.valueOf(monthValue)) && year.equals(String.valueOf(yearValue))) {
<<<<<<< HEAD
                        // Nếu tìm thấy ngày, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
=======
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7)};
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
                        newModel.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }
            }
        }
        jTable_HD.setModel(newModel);
<<<<<<< HEAD
    }
    private void SearchByKhoangCach(String DateRange) {
        DefaultTableModel newModel = new DefaultTableModel();
            newModel.addColumn("STT");
            newModel.addColumn("Mã Hóa Đơn");
            newModel.addColumn("Mã Nhân Viên");
            newModel.addColumn("Mã Khách Hàng");
            newModel.addColumn("Ngày Lập");
            newModel.addColumn("Ngày Xuất");
            newModel.addColumn("Tổng Giá Trị");
            newModel.addColumn("Tổng Giá Trị Sau Giảm");
        String[] dateRange = DateRange.split("-");
        int stt=1;
        if (dateRange.length != 2) {
            // Nếu không có đúng hai ngày, hiển thị thông báo lỗi
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đúng định dạng khoảng cách ngày.");
            return;
        }

        String startDateStr = dateRange[0].trim();
        String endDateStr = dateRange[1].trim();
        
        
        
=======
        
    }
    
    public void searchByRange(JDateChooser jDateChooser1, JDateChooser jDateChooser2) {
        // Định dạng ngày cho SimpleDateFormat
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        // Lấy ngày bắt đầu và ngày kết thúc từ JDateChooser
        Date startDate = jDateChooser1.getDate();
        Date endDate = jDateChooser2.getDate();

        DefaultTableModel newModel = new DefaultTableModel();
        newModel.addColumn("STT");
        newModel.addColumn("Mã Hóa Đơn");
        newModel.addColumn("Mã Nhân Viên");
        newModel.addColumn("Mã Khách Hàng");
        newModel.addColumn("Ngày Lập");
        newModel.addColumn("Ngày Xuất");
        newModel.addColumn("Tổng Giá Trị");
        newModel.addColumn("Tổng Giá Trị Sau Giảm");
        int stt=1;
        // Thực hiện tìm kiếm dựa trên startDate và endDate
        for (int i = 0; i < modelHD.getRowCount(); i++) {
        Object rowDataDate = modelHD.getValueAt(i, 5); // Giả sử cột ngày là cột thứ 5

<<<<<<< HEAD
            for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 3 (chỉ số cột 2) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date rowDate = dateFormat.parse(rowDataDate.toString());

                    if (rowDate.compareTo(startDate) >= 0 && rowDate.compareTo(endDate) <= 0) {
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        newModel.addRow(row);
                        stt++;
                   
=======
        if( rowDataDate != null){
            try {
                Date rowDate = dateFormat.parse(rowDataDate.toString());
                if (rowDate.compareTo(startDate) >= 0 && rowDate.compareTo(endDate) <= 0) {
                    Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7)};
                    newModel.addRow(row);
                    stt++;
>>>>>>> 42dab1ce1fbdb1282df89d0a5f2870996f384a92
                }
                }catch(java.text.ParseException ex){
                    ex.printStackTrace();
                }
            }
            jTable_HD.setModel(newModel);
        }
        jTable_HD.setModel(newModel);
    }
  


    
    
//    private void SearchByKhoangCach(String DateRange) {
//        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
//
//        Date startDate = jDateStart.getDate();
//        Date endDate = jDateEnd.getDate();
//
//        if (startDate == null || endDate == null) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày bắt đầu và ngày kết thúc.");
//            return;
//        }
//        DefaultTableModel newModel = new DefaultTableModel();
//            newModel.addColumn("STT");
//            newModel.addColumn("Mã Hóa Đơn");
//            newModel.addColumn("Mã Nhân Viên");
//            newModel.addColumn("Mã Khách Hàng");
//            newModel.addColumn("Ngày Lập");
//            newModel.addColumn("Ngày Xuất");
//            newModel.addColumn("Tổng Giá Trị");
//            newModel.addColumn("Tổng Giá Trị Sau Giảm");
//        for (int i = 0; i < modelHD.getRowCount(); i++) {
//        Object rowDataDate = modelHD.getValueAt(i, 5); // Giả sử cột ngày là cột thứ 5
//
//        
//        
//
//        
//        
//
//        try {
//            
//            
//            if (!isvalid(startDate) || !isvalid(endDate)) {
//            // Nếu startDate hoặc endDate không hợp lệ, hiển thị thông báo lỗi
//            JOptionPane.showMessageDialog(this, "Ngày bắt đầu hoặc ngày kết thúc không hợp lệ.");
//            return;
//            }
//            
//            if (startDate.after(endDate)) {
//                // Nếu ngày bắt đầu lớn hơn ngày kết thúc, hiển thị thông báo lỗi
//                JOptionPane.showMessageDialog(this, "Ngày bắt đầu không được lớn hơn ngày kết thúc.");
//                return;
//            }
//
//            for (int i = 0; i < modelHD.getRowCount(); i++) {
//            // Lấy giá trị từ cột thứ 3 (chỉ số cột 2) trong modelHD
//            Object rowDataDate = modelHD.getValueAt(i, 5);
//
//            if (rowDataDate != null) {
//                try {
//                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
//                    Date rowDate = dateFormat.parse(rowDataDate.toString());
//
//                    if (rowDate.compareTo(startDate) >= 0 && rowDate.compareTo(endDate) <= 0) {
//                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6),modelHD.getValueAt(i,7)};
//                        newModel.addRow(row);
//                        stt++;
//                   
//                }
//                    
//                } catch (ParseException ex) {
//                    // Xử lý nếu không thể chuyển đổi ngày
//                    ex.printStackTrace();
//                }
//            }
//            jTable_HD.setModel(newModel);
//        }
//
//        } catch (ParseException ex) {
//            // Xử lý nếu không thể chuyển đổi ngày
//            JOptionPane.showMessageDialog(this, "Ngày/Tháng/Năm - Ngày/Tháng/Năm Bạn Nhập Sai!");
//            return;
//        }
//    }
    
    
    private boolean isvalid(Date date) {
    // Thực hiện kiểm tra tính hợp lệ của ngày tại đây
    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

    try {
        String dateStr = dateFormat.format(date); // Chuyển Date thành chuỗi
        String[] dateParts = dateStr.split("/");
        if (dateParts.length != 3) {
            return false;
        }

        String dayStr = dateParts[0].trim();
        String monthStr = dateParts[1].trim();
        String yearStr = dateParts[2].trim();

        int day = Integer.parseInt(dayStr);
        int month = Integer.parseInt(monthStr);
        int year = Integer.parseInt(yearStr);

        return isValidDate(day, month, year); // Sử dụng hàm isValid để kiểm tra
        } catch (NumberFormatException e) {
            return false;
        }
    }
    
    private boolean isValid(int month, int year) {
        // Kiểm tra năm có lớn hơn năm 0 không
        if (year <= 0) {
            return false;
        }

        // Kiểm tra tháng có nằm trong khoảng từ 1 đến 12 không
        if (month < 1 || month > 12) {
            return false;
        }

        return true;
    }
    private boolean isValidDate(int day, int month, int year) {
        // Kiểm tra năm có lớn hơn năm 0 không
        if (year <= 0) {
            return false;
        }

        // Kiểm tra tháng có nằm trong khoảng từ 1 đến 12 không
        if (month < 1 || month > 12) {
            return false;
        }

        // Kiểm tra số ngày hợp lệ trong tháng
        int maxDays;
        if (month == 2) {
            // Nếu tháng là tháng 2, xem xét năm nhuận
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                maxDays = 29; // Năm nhuận có 29 ngày
            } else {
                maxDays = 28; // Năm không nhuận có 28 ngày
            }
        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
            maxDays = 30; // Tháng 4, 6, 9, 11 có 30 ngày
        } else {
            maxDays = 31; // Các tháng còn lại có 31 ngày
        }

        // Kiểm tra ngày có nằm trong khoảng hợp lệ không
        return day >= 1 && day <= maxDays;
    }


    private void loadHDlist(){
        arrHoaDon = hdBLL.getListHoaDon();
        for(int i = modelHD.getRowCount()-1;i>=0;i--)
            modelHD.removeRow(i);
        for(int i = 0; i<arrHoaDon.size();i++){
            HoaDonDTO em= arrHoaDon.get(i);
            int stt= i+1;
            String mahd = em.getMaHD();
            String manv = em.getMaNV();
            String makh = em.getMaKH();
            String ngaylap = em.getNgayLap();
            String ngaygiao = em.getNgayGiao();
            int tong = em.getTongTienGoc();
            int tongsaugiam= em.getTongTienSauGiam();
            Object[] row = {stt,mahd,manv,makh,ngaylap,ngaygiao,tong,tongsaugiam};
            modelHD.addRow(row);
        }
    }
    private void loadCTHDlist(String mahd){
        arrCTHoaDon = cthdBLL.getListCTHoaDon();
        for(int i = modelCTHD.getRowCount()-1;i>=0;i--)
            modelCTHD.removeRow(i);
        for(int i = 0; i<arrCTHoaDon.size();i++){
            CTHoaDonDTO em= arrCTHoaDon.get(i);
            
            String masp = em.getMaSP();
            String tensp = em.getTenSP();
            int soluong = em.getSoLuong();
            int dongia = em.getDonGia();
            String Mahd= em.getMaHD();
            if (mahd.equals(Mahd)) {
        	  Object[] row = {masp,tensp,soluong,dongia};
        	  modelCTHD.addRow(row);
          }

        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_CapNhat;
    private javax.swing.JButton jButton_Search;
    private javax.swing.JButton jButton_ThanhToan;
    private javax.swing.JButton jButton_Xoa;
    private javax.swing.JComboBox<String> jComboBox_SearchDate;
    private javax.swing.JComboBox<String> jComboBox_SearchType;
    private com.toedter.calendar.JDateChooser jDateEnd;
    private com.toedter.calendar.JDateChooser jDateStart;
    private javax.swing.JLabel jLabel_Date;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_CTHD;
    private javax.swing.JTable jTable_HD;
    private javax.swing.JTextField jTextField_Search;
    // End of variables declaration//GEN-END:variables
}
