/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import BLL.CTHoaDonBLL;
import BLL.HoaDonBLL;
import DTO.CTHoaDonDTO;
import DTO.HoaDonDTO;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.JLabel;

/**
 *
 * @author HAO KIET
 */
public class HoaDonGUI extends javax.swing.JPanel {
    HoaDonBLL hdBLL=new HoaDonBLL();
    CTHoaDonBLL cthdBLL=new CTHoaDonBLL();
    
    ArrayList<HoaDonDTO> arrHoaDon=new ArrayList<HoaDonDTO>();
    ArrayList<CTHoaDonDTO> arrCTHoaDon = new ArrayList<CTHoaDonDTO>();
    
    DefaultTableModel modelHD = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // không cho phép chỉnh sửa giá trị các ô trong bảng
        }
    };
    DefaultTableModel modelCTHD = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // không cho phép chỉnh sửa giá trị các ô trong bảng
        }
    };
    
    /**
     * Creates new form HoaDonGUI
     */
    public HoaDonGUI() {
        initComponents();
        jTable_HD.setModel(modelHD);
        jTable_CTHD.setModel(modelCTHD);
        
        modelHD.addColumn("STT");
        modelHD.addColumn("Mã Hóa Đơn");
        modelHD.addColumn("Mã Nhân Viên");
        modelHD.addColumn("Mã Khách Hàng");
        modelHD.addColumn("Ngày Lập");
        modelHD.addColumn("Ngày Xuất");
        modelHD.addColumn("Tổng Giá Trị");
        
        modelCTHD.addColumn("STT");
        modelCTHD.addColumn("Mã Sản Phẩm");
        modelCTHD.addColumn("Tên Sản Phẩm");
        modelCTHD.addColumn("Số Lượng");
        modelCTHD.addColumn("Đơn Giá");      
       SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

        // Lấy thời gian hiện tại
        Date date = new Date();
        Timer timer = new Timer(1000, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Cập nhật giá trị của jLabel
                jLabel_Date.setText(dateFormat.format(new Date()));
            }
        });
        timer.start();
        loadHDlist();
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_HD = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_CTHD = new javax.swing.JTable();
        jButton_Xoa = new javax.swing.JButton();
        jButton_ThanhToan = new javax.swing.JButton();
        jButton_CapNhat = new javax.swing.JButton();
        jTextField_Search = new javax.swing.JTextField();
        jButton_Search = new javax.swing.JButton();
        jComboBox_SearchDate = new javax.swing.JComboBox<>();
        jLabel_Date = new javax.swing.JLabel();
        jComboBox_SearchType = new javax.swing.JComboBox<>();

        setMaximumSize(new java.awt.Dimension(1000, 650));
        setMinimumSize(new java.awt.Dimension(1000, 650));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0)));

        jTable_HD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_HD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_HDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_HD);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 255, 0)));

        jTable_CTHD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable_CTHD);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
        );

        jButton_Xoa.setText("Xóa");
        jButton_Xoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_XoaActionPerformed(evt);
            }
        });

        jButton_ThanhToan.setText("Thanh Toán");
        jButton_ThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ThanhToanActionPerformed(evt);
            }
        });

        jButton_CapNhat.setText("Cập Nhật");
        jButton_CapNhat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CapNhatActionPerformed(evt);
            }
        });

        jTextField_Search.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField_SearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField_SearchFocusLost(evt);
            }
        });
        jTextField_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField_SearchActionPerformed(evt);
            }
        });

        jButton_Search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Comp/search icon.png"))); // NOI18N
        jButton_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SearchActionPerformed(evt);
            }
        });

        jComboBox_SearchDate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {" ", "Ngày","Tháng","Năm","Tháng/Năm","Ngày/Tháng/Năm","Ngày/Tháng/Năm-Ngày/Tháng/Năm"}));
        jComboBox_SearchDate.setPreferredSize(new java.awt.Dimension(100, 30));
        jComboBox_SearchDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_SearchDateItemStateChanged(evt);
            }
        });
        jComboBox_SearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_SearchDateActionPerformed(evt);
            }
        });

        jLabel_Date.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel_Date.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_Date.setText("Ngày Tháng Năm");
        jLabel_Date.setToolTipText("");
        jLabel_Date.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel_Date.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel_Date.setName(""); // NOI18N
        jLabel_Date.setVerifyInputWhenFocusTarget(false);

        jComboBox_SearchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {" ","Mã Nhân Viên","Tên Nhân Viên" }));
        jComboBox_SearchType.setPreferredSize(new java.awt.Dimension(100, 30));
        jComboBox_SearchType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_SearchTypeItemStateChanged(evt);
            }
        });
        jComboBox_SearchType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox_SearchTypeMouseClicked(evt);
            }
        });
        jComboBox_SearchType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_SearchTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_ThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(jButton_CapNhat, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_SearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox_SearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_Date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_SearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_SearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_CapNhat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton_Xoa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_ThanhToan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_XoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_XoaActionPerformed
        // TODO add your handling code here:
        int i= jTable_HD.getSelectedRow();
         if(i>=0){
            arrHoaDon.remove(i);
            hdBLL.DelHD(modelHD.getValueAt(i, 1).toString());
            loadHDlist();
             
         }
    }//GEN-LAST:event_jButton_XoaActionPerformed

    private void jButton_ThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ThanhToanActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy ");
        Date date = new Date();
        HoaDonDTO pn = new HoaDonDTO();

        int row = jTable_HD.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Bạn chưa chọn hóa đơn!");
        } else {
            String valuenull = modelHD.getValueAt(row, 5).toString();
            if (!valuenull.equals("")) {
                JOptionPane.showMessageDialog(null, "Hóa đơn này đã được thanh toán, mời bạn chọn lại hóa đơn khác !!!");
            } else {
                modelHD.setValueAt(dateFormat.format(new Date()), row, 5);
                hdBLL.AddNgayGiao(modelHD.getValueAt(row, 1).toString(), dateFormat.format(new Date()));
                for (int i = jTable_CTHD.getRowCount() - 1; i >= 0; i--) {
                    
                        
                            int soluong = Integer.parseInt(modelCTHD.getValueAt(i, 3).toString());
                            
                            hdBLL.DelSL(modelCTHD.getValueAt(i, 1).toString(), soluong);
                        
                    

                }
            }
        }
        loadHDlist();
    }//GEN-LAST:event_jButton_ThanhToanActionPerformed

    private void jButton_CapNhatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CapNhatActionPerformed
        // TODO add your handling code here:
        loadHDlist();
    }//GEN-LAST:event_jButton_CapNhatActionPerformed

    private void jTable_HDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_HDMouseClicked
        // TODO add your handling code here:
        for(int i=modelCTHD.getRowCount()-1;i>=0;i--){
            modelCTHD.removeRow(i);
        }
        int row = jTable_HD.getSelectedRow();
        HoaDonDTO hd = arrHoaDon.get(row);
        ArrayList<CTHoaDonDTO> listCTHD = cthdBLL.getListCTHoaDon();
        for(CTHoaDonDTO cthd : listCTHD) {
            if(cthd.getMaHD().equals(hd.getMaHD())) {
            	
                String id = cthd.getMaSP();
                String name = cthd.getTenSP();
                int soLuong = (int) cthd.getSoLuong();
                int dongia = cthd.getDonGia();
                
                Object[] rowData = {id, name, dongia, soLuong};
                modelCTHD.addRow(rowData);
            }
        }
    
    }//GEN-LAST:event_jTable_HDMouseClicked

    private void jComboBox_SearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_SearchDateActionPerformed
        // TODO add your handling code here:
        String selectedValue = (String) jComboBox_SearchDate.getSelectedItem();

        // Đặt JComboBox2 thành giá trị tương ứng
        if(selectedValue!=""){
            jComboBox_SearchType.setSelectedItem(0);
        }
    }//GEN-LAST:event_jComboBox_SearchDateActionPerformed

    private void jButton_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SearchActionPerformed

            // TODO add your handling code here:
        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
        String selectedValueID = jComboBox_SearchType.getSelectedItem().toString();
        // Lấy giá trị từ jTextField
        String searchText = jTextField_Search.getText().trim();

        // Tách giá trị ngày, tháng và năm từ chuỗi
        String[] dateParts = searchText.split("/");
        String day = "";
        String month = "";
        String year = "";

        if (dateParts.length == 3) {
            day = dateParts[0].trim();
            month = dateParts[1].trim();
            year = dateParts[2].trim();
        } else {
            // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
            JOptionPane.showMessageDialog(this, "Giá trị ngày tháng năm không hợp lệ.");
            return; // Thoát khỏi hàm nếu giá trị không hợp lệ
        }
        

        // Chuyển đổi giá trị ngày, tháng và năm thành số nguyên
        int dayValue = Integer.parseInt(day);
        int monthValue = Integer.parseInt(month);
        int yearValue = Integer.parseInt(year);

        // Kiểm tra tính hợp lệ của ngày, tháng và năm
        if (isValidDate(dayValue, monthValue, yearValue)) {
            // Ngày, tháng và năm hợp lệ, thực hiện tìm kiếm
            if ("Ngày".equals(selectedValue)) {
                // Tìm kiếm theo ngày trong jTable
                searchByDay(day);
            } else if ("Tháng".equals(selectedValue)) {
                // Tìm kiếm theo tháng trong jTable
                searchByMonth(month);
            } else if ("Năm".equals(selectedValue)) {
                // Tìm kiếm theo năm trong jTable
                searchByYear(year);
            } else if ("Tháng/Năm".equals(selectedValue)) {
                // Tìm kiếm theo tháng và năm trong jTable
                searchByMonthAndYear(month, year);
            } else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
                // Tìm kiếm theo ngày, tháng và năm trong jTable
                searchByDayMonthYear(day, month, year);
            } else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
                // Tìm kiếm theo ngày, tháng và năm trong jTable
                SearchByKhoangCach(searchText);
            } 
            // ...
        } else {
            // Ngày, tháng và năm không hợp lệ, hiển thị thông báo hoặc xử lý lỗi
            JOptionPane.showMessageDialog(this, "Ngày tháng năm không hợp lệ.");
        }

        
        if ("Mã Hóa Đơn".equals(selectedValueID)){
            searchByIDHD(searchText);
        } else if ("Mã Nhân Viên".equals(selectedValueID)){
            searchByIDNV(searchText);
        } else if ("Mã Hóa Đơn".equals(selectedValueID)){
            searchByIDNV(searchText);
        } else if ("Tất cả".equals(selectedValueID)){
            loadHDlist();
        }
        else {
            // Hiển thị thông báo hoặc xử lý lỗi nếu giá trị không hợp lệ
            JOptionPane.showMessageDialog(this, "Tùy chọn không hợp lệ.");
        }
    }//GEN-LAST:event_jButton_SearchActionPerformed

    private void jComboBox_SearchTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_SearchTypeActionPerformed
        // TODO add your handling code here:
//        String selectedValue = (String) jComboBox_SearchType.getSelectedItem();
//
//        // Đặt JComboBox2 thành giá trị tương ứng
//        if(selectedValue != ""){
//            jComboBox_SearchDate.setSelectedItem(0);
//        }
    }//GEN-LAST:event_jComboBox_SearchTypeActionPerformed

    private void jComboBox_SearchTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox_SearchTypeMouseClicked
        // TODO add your handling code here:
//        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
//    
//    // Thiết lập giá trị mẫu cho jTextField dựa trên mục đã chọn
//        setTextFieldPlaceholder(selectedValue);
    }//GEN-LAST:event_jComboBox_SearchTypeMouseClicked

    private void jComboBox_SearchDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_SearchDateItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
        String selectedValue = jComboBox_SearchDate.getSelectedItem().toString();
        
        // Thiết lập giá trị mẫu cho jTextField dựa trên mục đã chọn
        setTextFieldPlaceholder(selectedValue);
        }
        String selectedValue = (String) jComboBox_SearchDate.getSelectedItem();
            if (!selectedValue.equals(" ")) {
                // Nếu mục chọn không phải là " ", đặt comboBox2 về giá trị mặc định
                jComboBox_SearchType.setSelectedItem(" ");
            }
        
    }//GEN-LAST:event_jComboBox_SearchDateItemStateChanged

    private void jComboBox_SearchTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_SearchTypeItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
        String selectedValue = jComboBox_SearchType.getSelectedItem().toString();
        
        // Thiết lập giá trị mẫu cho jTextField dựa trên mục đã chọn
        setTextFieldPlaceholder(selectedValue);
        }
        String selectedValue = (String) jComboBox_SearchType.getSelectedItem();
            if (!selectedValue.equals(" ")) {
                // Nếu mục chọn không phải là " ", đặt comboBox2 về giá trị mặc định
                jComboBox_SearchDate.setSelectedItem(" ");
            }
    }//GEN-LAST:event_jComboBox_SearchTypeItemStateChanged

    private void jTextField_SearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_SearchFocusGained
        // TODO add your handling code here:
        if(jTextField_Search!=null){
            jTextField_Search.setText("");
            jTextField_Search.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_jTextField_SearchFocusGained

    private void jTextField_SearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField_SearchFocusLost
        // TODO add your handling code here:
//        if(jTextField_Search.getText().isEmpty()){
//            jTextField_Search.setForeground(Color.GRAY);
//            
//        }
    }//GEN-LAST:event_jTextField_SearchFocusLost

    private void jTextField_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField_SearchActionPerformed

    private void setTextFieldPlaceholder(String selectedValue) {
        String placeholderText = ""; // Chuỗi mẫu sẽ được hiển thị trong jTextField

        // Xác định chuỗi mẫu dựa trên mục đã chọn
        if ("Tháng/Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10/2023";
        }else if ("Ngày/Tháng/Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10/10/2003";
        }else if ("Ngày/Tháng/Năm-Ngày/Tháng/Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10/10/2003-1/1/2023";
        }else if ("Ngày".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10(Ngày) ";
        }else if ("Tháng".equals(selectedValue)) {
            placeholderText = "Ví dụ: 10(Tháng) ";
        }else if ("Năm".equals(selectedValue)) {
            placeholderText = "Ví dụ: 2003(Năm) ";
        }else if ("Tên Nhân Viên".equals(selectedValue)) {
            placeholderText = "Ví dụ: Nguyễn Văn A";
        }else if ("Mã Nhân Viên".equals(selectedValue)) {
            placeholderText = "Ví dụ: NV001";
        }
        

        // Thiết lập giá trị mẫu cho jTextField
        jTextField_Search.setText(placeholderText);
    }
        private void loadHDlist(){
        arrHoaDon = hdBLL.getListHoaDon();
//        for(int i = modelSP.getRowCount()-1;i>=0;i--)
//            modelSP.removeRow(i);
        for(int i = 0; i<arrHoaDon.size();i++){
            HoaDonDTO em= arrHoaDon.get(i);
            int stt= i+1;
            String mahd = em.getMaHD();
            String manv = em.getMaNV();
            String makh = em.getMaKH();
            String ngaylap = em.getNgayLap();
            String ngaygiao = em.getNgayGiao();
            int tong = em.getTongTien();
            Object[] row = {stt,mahd,manv,makh,ngaylap,ngaygiao,tong};
            modelHD.addRow(row);
        }
    }
    private void loadCTHDlist(String mahd){
        arrCTHoaDon = cthdBLL.getListCTHoaDon();
//        for(int i = modelSP.getRowCount()-1;i>=0;i--)
//            modelSP.removeRow(i);
        for(int i = 0; i<arrCTHoaDon.size();i++){
            CTHoaDonDTO em= arrCTHoaDon.get(i);
            int stt= i+1;
            String masp = em.getMaSP();
            String tensp = em.getTenSP();
            int soluong = em.getSoLuong();
            int dongia = em.getDonGia();
            String Mahd= em.getMaHD();
            if (mahd.equals(Mahd)) {
        	  Object[] row = {masp,tensp,soluong,dongia};
        	  modelCTHD.addRow(row);
          }

        }
    }
    private void searchByIDKH(String idkh) {
    // Thực hiện tìm kiếm theo ID trong jTable và cập nhật kết quả lên jTable
        
        modelHD.setRowCount(0); // Xóa tất cả dữ liệu hiện có trong jTable
        int stt=1;
        for (int i = 0; i < modelHD.getRowCount(); i++) {
            String rowData = modelHD.getValueAt(i, 1).toString(); // Cột ID là cột 0
            if (rowData.equals(idkh)) {
                // Nếu tìm thấy ID, thêm hàng tương ứng vào jTable
                
                Object[] row = new Object[]{stt,modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2),modelHD.getValueAt(i, 3),modelHD.getValueAt(i, 4),modelHD.getValueAt(i, 5),modelHD.getValueAt(i, 6)};
                modelHD.addRow(row);
                stt++;
                
            }
        }
    }
    private void searchByIDNV(String idnv) {
    // Thực hiện tìm kiếm theo ID trong jTable và cập nhật kết quả lên jTable
        
        modelHD.setRowCount(0); // Xóa tất cả dữ liệu hiện có trong jTable
        int stt=1;
        for (int i = 0; i < modelHD.getRowCount(); i++) {
            String rowData = modelHD.getValueAt(i, 1).toString(); // Cột ID là cột 0
            if (rowData.equals(idnv)) {
                // Nếu tìm thấy ID, thêm hàng tương ứng vào jTable
                
                Object[] row = new Object[]{stt,modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2),modelHD.getValueAt(i, 3),modelHD.getValueAt(i, 4),modelHD.getValueAt(i, 5),modelHD.getValueAt(i, 6)};
                modelHD.addRow(row);
                stt++;
                
            }
        }
    }
    private void searchByIDHD(String idhd) {
    // Thực hiện tìm kiếm theo ID trong jTable và cập nhật kết quả lên jTable
        
        modelHD.setRowCount(0); // Xóa tất cả dữ liệu hiện có trong jTable
        int stt=1;
        for (int i = 0; i < modelHD.getRowCount(); i++) {
            String rowData = modelHD.getValueAt(i, 1).toString(); // Cột ID là cột 0
            if (rowData.equals(idhd)) {
                // Nếu tìm thấy ID, thêm hàng tương ứng vào jTable
                
                Object[] row = new Object[]{stt,modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2),modelHD.getValueAt(i, 3),modelHD.getValueAt(i, 4),modelHD.getValueAt(i, 5),modelHD.getValueAt(i, 6)};
                modelHD.addRow(row);
                stt++;
                
            }
        }
    }
    private void searchByDay(String day) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        modelHD.setRowCount(0);

        int stt = 1;

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày tháng năm

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 5 (chỉ số cột 4) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 4);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date date = dateFormat.parse(rowDataDate.toString());

                    // Chuyển đổi Date thành định dạng ngày
                    String formattedDate = dateFormat.format(date);

                    // So sánh giá trị ngày đã chuyển đổi với ngày bạn đang tìm kiếm
                    if (formattedDate.equals(day)) {
                        // Nếu tìm thấy ngày, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        modelHD.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    ex.printStackTrace();
                }
            }
        }
    }

    private void searchByMonth(String month) {
    // Xóa tất cả dữ liệu hiện có trong jTable
        modelHD.setRowCount(0);

        int stt = 1;

        SimpleDateFormat monthFormat = new SimpleDateFormat("MM/yyyy");

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 5 (chỉ số cột 4) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date date = monthFormat.parse(rowDataDate.toString());

                    // Chuyển đổi Date thành định dạng ngày
                    String formattedMonth = monthFormat.format(date);

                    // So sánh giá trị ngày đã chuyển đổi với ngày bạn đang tìm kiếm
                    if (formattedMonth.equals(month)) {
                        // Nếu tìm thấy ngày, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        modelHD.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi ngày.");
                    ex.printStackTrace();

                }
            }
        }
    }
    private void searchByYear(String year) {
    // Xóa tất cả dữ liệu hiện có trong jTable
        modelHD.setRowCount(0);

        int stt = 1;

        SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy"); // Định dạng năm

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date date = yearFormat.parse(rowDataDate.toString());

                    // Chuyển đổi Date thành định dạng năm
                    String formattedYear = yearFormat.format(date);

                    // So sánh giá trị năm đã chuyển đổi với năm bạn đang tìm kiếm
                    if (formattedYear.equals(year)) {
                        // Nếu tìm thấy năm, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        modelHD.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    JOptionPane.showMessageDialog(this, "Lỗi: Không thể chuyển đổi năm.");
                    ex.printStackTrace();
                }
            }
        }
    }
    private void searchByMonthAndYear(String month, String year) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        modelHD.setRowCount(0);

        int stt = 1;

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày tháng năm

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 4 (chỉ số cột 3) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date date = dateFormat.parse(rowDataDate.toString());

                    // Lấy tháng và năm từ đối tượng Date
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(date);
                    int dateMonth = calendar.get(Calendar.MONTH) + 1; // Tháng được đánh số từ 0 đến 11, nên cộng thêm 1
                    int dateYear = calendar.get(Calendar.YEAR);

                    // So sánh giá trị tháng và năm đã chuyển đổi với tháng và năm bạn đang tìm kiếm
                    if (dateMonth == Integer.parseInt(month) && dateYear == Integer.parseInt(year)) {
                        // Nếu tìm thấy tháng và năm, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        modelHD.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    ex.printStackTrace();
                }
            }
        }
    }
    private void searchByDayMonthYear(String day, String month, String year) {
        // Xóa tất cả dữ liệu hiện có trong jTable
        modelHD.setRowCount(0);

        int stt = 1;

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // Định dạng ngày tháng năm

        for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 3 (chỉ số cột 2) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date date = dateFormat.parse(rowDataDate.toString());

                    // Tách ngày, tháng và năm từ Date
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(date);
                    int dayValue = cal.get(Calendar.DAY_OF_MONTH);
                    int monthValue = cal.get(Calendar.MONTH) + 1; // Tháng trong Calendar bắt đầu từ 0
                    int yearValue = cal.get(Calendar.YEAR);

                    // So sánh giá trị ngày, tháng và năm đã tách với giá trị bạn đang tìm kiếm
                    if (day.equals(String.valueOf(dayValue)) && month.equals(String.valueOf(monthValue)) && year.equals(String.valueOf(yearValue))) {
                        // Nếu tìm thấy ngày, thêm hàng tương ứng vào jTable
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        modelHD.addRow(row);
                        stt++;
                    }
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    ex.printStackTrace();
                }
            }
        }
    }
    private void SearchByKhoangCach(String DateRange) {
        String[] dateRange = DateRange.split("-");
        int stt=1;
        if (dateRange.length != 2) {
            // Nếu không có đúng hai ngày, hiển thị thông báo lỗi
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đúng định dạng khoảng cácmh ngày.");
            return;
        }

        String startDateStr = dateRange[0].trim();
        String endDateStr = dateRange[1].trim();
        
        
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        try {
            Date startDate = dateFormat.parse(startDateStr);
            Date endDate = dateFormat.parse(endDateStr);

            if (startDate.after(endDate)) {
                // Nếu ngày bắt đầu lớn hơn ngày kết thúc, hiển thị thông báo lỗi
                JOptionPane.showMessageDialog(this, "Ngày bắt đầu không được lớn hơn ngày kết thúc.");
                return;
            }

            for (int i = 0; i < modelHD.getRowCount(); i++) {
            // Lấy giá trị từ cột thứ 3 (chỉ số cột 2) trong modelHD
            Object rowDataDate = modelHD.getValueAt(i, 5);

            if (rowDataDate != null) {
                try {
                    // Chuyển đổi giá trị từ định dạng ngày tháng năm sang Date object
                    Date rowDate = dateFormat.parse(rowDataDate.toString());

                    if (rowDate.compareTo(startDate) >= 0 && rowDate.compareTo(endDate) <= 0) {
                        Object[] row = new Object[]{stt, modelHD.getValueAt(i, 1), modelHD.getValueAt(i, 2), modelHD.getValueAt(i, 3), modelHD.getValueAt(i, 4), modelHD.getValueAt(i, 5), modelHD.getValueAt(i, 6)};
                        modelHD.addRow(row);
                        stt++;
                   
                }
                    
                } catch (ParseException ex) {
                    // Xử lý nếu không thể chuyển đổi ngày
                    ex.printStackTrace();
                }
            }
        }

        } catch (ParseException ex) {
            // Xử lý nếu không thể chuyển đổi ngày
            JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ.");
            return;
        }
    }

    private boolean isValidDate(int day, int month, int year) {
        // Kiểm tra năm có lớn hơn năm 0 không
        if (year <= 0) {
            return false;
        }

        // Kiểm tra tháng có nằm trong khoảng từ 1 đến 12 không
        if (month < 1 || month > 12) {
            return false;
        }

        // Kiểm tra số ngày hợp lệ trong tháng
        int maxDays;
        if (month == 2) {
            // Nếu tháng là tháng 2, xem xét năm nhuận
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
                maxDays = 29; // Năm nhuận có 29 ngày
            } else {
                maxDays = 28; // Năm không nhuận có 28 ngày
            }
        } else if (month == 4 || month == 6 || month == 9 || month == 11) {
            maxDays = 30; // Tháng 4, 6, 9, 11 có 30 ngày
        } else {
            maxDays = 31; // Các tháng còn lại có 31 ngày
        }

        // Kiểm tra ngày có nằm trong khoảng hợp lệ không
        return day >= 1 && day <= maxDays;
    }




    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_CapNhat;
    private javax.swing.JButton jButton_Search;
    private javax.swing.JButton jButton_ThanhToan;
    private javax.swing.JButton jButton_Xoa;
    private javax.swing.JComboBox<String> jComboBox_SearchDate;
    private javax.swing.JComboBox<String> jComboBox_SearchType;
    private javax.swing.JLabel jLabel_Date;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_CTHD;
    private javax.swing.JTable jTable_HD;
    private javax.swing.JTextField jTextField_Search;
    // End of variables declaration//GEN-END:variables
}
